// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlcustom

import (
	"context"
)

const createResult = `-- name: CreateResult :one
INSERT INTO results (
  oauth_id, result, result_start_time, quiz_type
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, result_start_time, result, oauth_id, quiz_type
`

type CreateResultParams struct {
	OauthID         string
	Result          string
	ResultStartTime string
	QuizType        string
}

func (q *Queries) CreateResult(ctx context.Context, arg CreateResultParams) (Result, error) {
	row := q.db.QueryRowContext(ctx, createResult,
		arg.OauthID,
		arg.Result,
		arg.ResultStartTime,
		arg.QuizType,
	)
	var i Result
	err := row.Scan(
		&i.ID,
		&i.ResultStartTime,
		&i.Result,
		&i.OauthID,
		&i.QuizType,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  oauth_id, key
) VALUES (
  ?, ?
)
RETURNING id, oauth_id, "key"
`

type CreateUserParams struct {
	OauthID string
	Key     []byte
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.OauthID, arg.Key)
	var i User
	err := row.Scan(&i.ID, &i.OauthID, &i.Key)
	return i, err
}

const deleteResult = `-- name: DeleteResult :exec
DELETE FROM results
WHERE oauth_id = ?
`

func (q *Queries) DeleteResult(ctx context.Context, oauthID string) error {
	_, err := q.db.ExecContext(ctx, deleteResult, oauthID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE oauth_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, oauthID string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, oauthID)
	return err
}

const getResult = `-- name: GetResult :many
SELECT id, result_start_time, result, oauth_id, quiz_type FROM results
WHERE oauth_id = ?
`

func (q *Queries) GetResult(ctx context.Context, oauthID string) ([]Result, error) {
	rows, err := q.db.QueryContext(ctx, getResult, oauthID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Result
	for rows.Next() {
		var i Result
		if err := rows.Scan(
			&i.ID,
			&i.ResultStartTime,
			&i.Result,
			&i.OauthID,
			&i.QuizType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, oauth_id, "key" FROM users
WHERE oauth_id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, oauthID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, oauthID)
	var i User
	err := row.Scan(&i.ID, &i.OauthID, &i.Key)
	return i, err
}

const listResults = `-- name: ListResults :many
SELECT id, result_start_time, result, oauth_id, quiz_type FROM results
ORDER BY result_start_time
`

func (q *Queries) ListResults(ctx context.Context) ([]Result, error) {
	rows, err := q.db.QueryContext(ctx, listResults)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Result
	for rows.Next() {
		var i Result
		if err := rows.Scan(
			&i.ID,
			&i.ResultStartTime,
			&i.Result,
			&i.OauthID,
			&i.QuizType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, oauth_id, "key" FROM users
ORDER BY oauth_id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.OauthID, &i.Key); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateResult = `-- name: UpdateResult :exec
UPDATE results
set result = ?
WHERE oauth_id = ?
`

type UpdateResultParams struct {
	Result  string
	OauthID string
}

func (q *Queries) UpdateResult(ctx context.Context, arg UpdateResultParams) error {
	_, err := q.db.ExecContext(ctx, updateResult, arg.Result, arg.OauthID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
set key = ?
WHERE oauth_id = ?
`

type UpdateUserParams struct {
	Key     []byte
	OauthID string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Key, arg.OauthID)
	return err
}
